# Boost.Bimap
#
# Copyright (c) 2006-2007 Matias Capeletto
#
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or copy at
# http://www.boost.org/LICENSE_1_0.txt)

# bring in rules for testing
import testing ;

project boost/bimap
    :
        default-build
        <warnings>off
    ;

alias bimap_tagged_test
    :
    [ run test_tagged.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    ;

alias bimap_relation_test
    :
    [ run test_structured_pair.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_mutant.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_mutant_relation.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    ;

alias bimap_test
    :
    # Check library user interface
    [ run test_bimap_set_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_multiset_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_unordered_set_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_unordered_multiset_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_list_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_vector_of.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    # Test bimap container
    [ run test_bimap_ordered.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_unordered.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_sequenced.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_unconstrained.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_assign.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_property_map.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_modify.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_range.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_operator_bracket.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_lambda.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_mutable.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_extra.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_convenience_header.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_project.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run test_bimap_info.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    ;

alias bimap_compile_fail_test
    :
    [ compile-fail compile_fail/test_bimap_mutable_1.cpp ]
    [ compile-fail compile_fail/test_bimap_mutable_2.cpp ]
    [ compile-fail compile_fail/test_bimap_mutable_3.cpp ]
    [ compile-fail compile_fail/test_bimap_info_1.cpp ]
    [ compile-fail compile_fail/test_bimap_info_2.cpp ]
    [ compile-fail compile_fail/test_bimap_info_3.cpp ]
    ;

alias bimap_and_boost
    :
    [ run ../example/bimap_and_boost/property_map.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run ../example/bimap_and_boost/range.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run ../example/bimap_and_boost/foreach.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run ../example/bimap_and_boost/lambda.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run ../example/bimap_and_boost/assign.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ run ../example/bimap_and_boost/typeof.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    ;

alias bimap_with_xpressive
    :
    [ run ../example/bimap_and_boost/xpressive.cpp
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    ;

alias bimap_with_serialization
    :
    [ run test_bimap_serialization.cpp
            /boost/serialization//boost_serialization
        :
        :
        :
        :
        :
            <preserve-target-tests>off
    ]
    [ compile ../example/bimap_and_boost/serialization.cpp
            /boost/serialization//boost_serialization
    ]
    ;

alias bimap_minimal_tests
    :
        bimap_tagged_test
        bimap_relation_test
        bimap_test
        bimap_compile_fail_test
        bimap_and_boost
    ;

alias bimap_tests_no_xpressive
    :
        bimap_minimal_tests
        bimap_with_serialization
    ;

alias bimap_tests_no_serialization
    :
        bimap_minimal_tests
        bimap_with_xpressive
    ;

alias bimap_all_tests
    :
        bimap_minimal_tests
        bimap_with_xpressive
        bimap_with_serialization
    ;
